name: CI/CD Reactions Microservices (split jobs)

on:
  push:
    branches: [main, test]
    paths:
      - 'add-like/**'
      - 'get-likes/**'
      - 'remove-like/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'add-like/**'
      - 'get-likes/**'
      - 'remove-like/**'
      - '.github/workflows/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      add_like: ${{ steps.filter.outputs.add_like }}
      get_likes: ${{ steps.filter.outputs.get_likes }}
      remove_like: ${{ steps.filter.outputs.remove_like }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            add_like:
              - 'add-like/**'
            get_likes:
              - 'get-likes/**'
            remove_like:
              - 'remove-like/**'

  # --------- ADD-LIKE JOBS ---------
  test_add_like:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.add_like == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for add-like
        working-directory: ./add-like
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          REACTIONS_DB_NAME=${{ secrets.REACTIONS_DB_NAME }}
          WEBHOOK_NOTIFICATIONS_URL=${{ secrets.WEBHOOK_NOTIFICATIONS_URL }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./add-like
        run: |
          pip install -r requirements.txt
          pytest

  build_and_push_add_like:
    needs: test_add_like
    runs-on: ubuntu-latest
    if: needs.changes.outputs.add_like == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build add-like image
        working-directory: ./add-like
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/add-like:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push add-like image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/add-like:latest

  deploy_add_like:
    needs: build_and_push_add_like
    runs-on: ubuntu-latest
    if: needs.changes.outputs.add_like == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy add-like to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_REACTIONS_DOMAIN_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/add-like.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            POST_DB_NAME=${{ secrets.POST_DB_NAME }}
            REACTIONS_DB_NAME=${{ secrets.REACTIONS_DB_NAME }}
            WEBHOOK_NOTIFICATIONS_URL=${{ secrets.WEBHOOK_NOTIFICATIONS_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/add-like:latest
            docker stop add-like || true && docker rm add-like || true
            docker run -d --name add-like \
              --env-file /home/ubuntu/add-like.env \
              -p 6001:6001 \
              ${{ secrets.DOCKERHUB_USERNAME }}/add-like:latest

  # --------- GET-LIKES JOBS ---------
  test_get_likes:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_likes == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for get-likes
        working-directory: ./get-likes
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          REACTIONS_DB_NAME=${{ secrets.REACTIONS_DB_NAME }}
          WEBHOOK_NOTIFICATIONS_URL=${{ secrets.WEBHOOK_NOTIFICATIONS_URL }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./get-likes
        run: |
          pip install -r requirements.txt
          pytest

  build_and_push_get_likes:
    needs: test_get_likes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_likes == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build get-likes image
        working-directory: ./get-likes
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/get-likes:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push get-likes image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/get-likes:latest

  deploy_get_likes:
    needs: build_and_push_get_likes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_likes == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-likes to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_REACTIONS_DOMAIN_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/get-likes.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            POST_DB_NAME=${{ secrets.POST_DB_NAME }}
            REACTIONS_DB_NAME=${{ secrets.REACTIONS_DB_NAME }}
            WEBHOOK_NOTIFICATIONS_URL=${{ secrets.WEBHOOK_NOTIFICATIONS_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-likes:latest
            docker stop get-likes || true && docker rm get-likes || true
            docker run -d --name get-likes \
              --env-file /home/ubuntu/get-likes.env \
              -p 6003:6003 \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-likes:latest

  # --------- REMOVE-LIKE JOBS ---------
  test_remove_like:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.remove_like == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for remove-like
        working-directory: ./remove-like
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          REACTIONS_DB_NAME=${{ secrets.REACTIONS_DB_NAME }}
          WEBHOOK_NOTIFICATIONS_URL=${{ secrets.WEBHOOK_NOTIFICATIONS_URL }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./remove-like
        run: |
          pip install -r requirements.txt
          pytest

  build_and_push_remove_like:
    needs: test_remove_like
    runs-on: ubuntu-latest
    if: needs.changes.outputs.remove_like == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build remove-like image
        working-directory: ./remove-like
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/remove-like:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push remove-like image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/remove-like:latest

  deploy_remove_like:
    needs: build_and_push_remove_like
    runs-on: ubuntu-latest
    if: needs.changes.outputs.remove_like == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy remove-like to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_REACTIONS_DOMAIN_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/remove-like.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            POST_DB_NAME=${{ secrets.POST_DB_NAME }}
            REACTIONS_DB_NAME=${{ secrets.REACTIONS_DB_NAME }}
            WEBHOOK_NOTIFICATIONS_URL=${{ secrets.WEBHOOK_NOTIFICATIONS_URL }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/remove-like:latest
            docker stop remove-like || true && docker rm remove-like || true
            docker run -d --name remove-like \
              --env-file /home/ubuntu/remove-like.env \
              -p 6002:6002 \
              ${{ secrets.DOCKERHUB_USERNAME }}/remove-like:latest
